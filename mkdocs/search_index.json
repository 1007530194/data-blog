{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to My Data Lab\n\n\n0. Requirements\n\n\n\n\nconda\n\n\nJupyter\n\n\nMkDocs\n\n\n\n\n1. Setup Env\n\n\nconda update conda\nconda env create --name data --clone root\nsource active data\npip install mkdocs\n\n\n\n\n2. Start Jupyter\n\n\njupyter notebook --config config/jupyter_notebook_config.py\n\n\n\n\n3. Deploy to GitHub Pages\n\n\nmkdocs gh-deploy --clean",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-my-data-lab",
            "text": "",
            "title": "Welcome to My Data Lab"
        },
        {
            "location": "/#0-requirements",
            "text": "conda  Jupyter  MkDocs",
            "title": "0. Requirements"
        },
        {
            "location": "/#1-setup-env",
            "text": "conda update conda\nconda env create --name data --clone root\nsource active data\npip install mkdocs",
            "title": "1. Setup Env"
        },
        {
            "location": "/#2-start-jupyter",
            "text": "jupyter notebook --config config/jupyter_notebook_config.py",
            "title": "2. Start Jupyter"
        },
        {
            "location": "/#3-deploy-to-github-pages",
            "text": "mkdocs gh-deploy --clean",
            "title": "3. Deploy to GitHub Pages"
        },
        {
            "location": "/Cheatsheet/",
            "text": "Scientific Python Cheatsheet\n\n\nIPGP\n / \nScientific Python Cheatsheet\n\n\nNumPy\n\n\n# array initialization\nnp.array([2, 3, 4])             # direct initialization\nnp.empty(20, dtype=np.float32)  # single precision array with 20 entries\nnp.zeros(200)                   # initialize 200 zeros\nnp.ones((3,3), dtype=np.int32)  # 3 x 3 integer matrix with ones\nnp.eye(200)                     # ones on the diagonal\nnp.zeros_like(a)                # returns array with zeros and the shape of a\nnp.linspace(0., 10., 100)       # 100 points from 0 to 10\nnp.arange(0, 100, 2)            # points from 0 to <100 with step width 2\nnp.logspace(-5, 2, 100)         # 100 log-spaced points between 1e-5 and 1e2\nnp.copy(a)                      # copy array to new memory\n\n\n\n\n# array properties and operations\na.shape                # a tuple with the lengths of each axis\nlen(a)                 # length of axis 0\na.ndim                 # number of dimensions (axes)\na.sort(axis=1)         # sort array along axis\na.flatten()            # collapse array to one dimension\na.conj()               # return complex conjugate\na.astype(np.int16)     # cast to integer\nnp.argmax(a, axis=2)   # return index of maximum along a given axis\nnp.cumsum(a)           # return cumulative sum\nnp.any(a)              # True if any element is True\nnp.all(a)              # True if all elements are True\nnp.argsort(a, axis=1)  # return sorted index array along axis",
            "title": "Cheatsheet"
        },
        {
            "location": "/Cheatsheet/#scientific-python-cheatsheet",
            "text": "IPGP  /  Scientific Python Cheatsheet",
            "title": "Scientific Python Cheatsheet"
        },
        {
            "location": "/Cheatsheet/#numpy",
            "text": "# array initialization\nnp.array([2, 3, 4])             # direct initialization\nnp.empty(20, dtype=np.float32)  # single precision array with 20 entries\nnp.zeros(200)                   # initialize 200 zeros\nnp.ones((3,3), dtype=np.int32)  # 3 x 3 integer matrix with ones\nnp.eye(200)                     # ones on the diagonal\nnp.zeros_like(a)                # returns array with zeros and the shape of a\nnp.linspace(0., 10., 100)       # 100 points from 0 to 10\nnp.arange(0, 100, 2)            # points from 0 to <100 with step width 2\nnp.logspace(-5, 2, 100)         # 100 log-spaced points between 1e-5 and 1e2\nnp.copy(a)                      # copy array to new memory  # array properties and operations\na.shape                # a tuple with the lengths of each axis\nlen(a)                 # length of axis 0\na.ndim                 # number of dimensions (axes)\na.sort(axis=1)         # sort array along axis\na.flatten()            # collapse array to one dimension\na.conj()               # return complex conjugate\na.astype(np.int16)     # cast to integer\nnp.argmax(a, axis=2)   # return index of maximum along a given axis\nnp.cumsum(a)           # return cumulative sum\nnp.any(a)              # True if any element is True\nnp.all(a)              # True if all elements are True\nnp.argsort(a, axis=1)  # return sorted index array along axis",
            "title": "NumPy"
        }
    ]
}